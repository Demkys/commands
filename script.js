const CONFIG = {
  animations: {
    duration: 300,
    easing: "ease-out",
    stagger: 100,
  },

  scroll: {
    throttleDelay: 16,
    offsetThreshold: 300,
  },

  breakpoints: {
    mobile: 768,
    tablet: 1024,
  },
}

const Utils = {
  throttle(func, delay) {
    let timeoutId
    let lastExecTime = 0
    return function (...args) {
      const currentTime = Date.now()

      if (currentTime - lastExecTime > delay) {
        func.apply(this, args)
        lastExecTime = currentTime
      } else {
        clearTimeout(timeoutId)
        timeoutId = setTimeout(
          () => {
            func.apply(this, args)
            lastExecTime = Date.now()
          },
          delay - (currentTime - lastExecTime),
        )
      }
    }
  },

  debounce(func, delay) {
    let timeoutId
    return function (...args) {
      clearTimeout(timeoutId)
      timeoutId = setTimeout(() => func.apply(this, args), delay)
    }
  },

  supports: {
    intersectionObserver: "IntersectionObserver" in window,
    requestIdleCallback: "requestIdleCallback" in window,
    passiveEvents: (() => {
      let supportsPassive = false
      try {
        const opts = Object.defineProperty({}, "passive", {
          get() {
            supportsPassive = true
            return true
          },
        })
        window.addEventListener("testPassive", null, opts)
        window.removeEventListener("testPassive", null, opts)
      } catch (e) {}
      return supportsPassive
    })(),
  },

  device: {
    isMobile: () => window.innerWidth <= CONFIG.breakpoints.mobile,
    isTablet: () => window.innerWidth <= CONFIG.breakpoints.tablet && window.innerWidth > CONFIG.breakpoints.mobile,
    isDesktop: () => window.innerWidth > CONFIG.breakpoints.tablet,
    isTouchDevice: () => "ontouchstart" in window || navigator.maxTouchPoints > 0,
    prefersReducedMotion: () => window.matchMedia("(prefers-reduced-motion: reduce)").matches,
  },

  smoothScrollTo(element, offset = 0) {
    const targetPosition = element.offsetTop - offset
    window.scrollTo({
      top: targetPosition,
      behavior: "smooth",
    })
  },

  random(min, max) {
    return Math.random() * (max - min) + min
  },
}

class CommandsApp {
  constructor() {
    this.elements = {}
    this.observers = {}
    this.isInitialized = false
    this.commandsData = []

    this.init()
  }

  init() {
    if (this.isInitialized) return

    this.loadCommandsData()
    this.cacheElements()
    this.setupEventListeners()
    this.initializeComponents()
    this.setupAnimations()

    this.isInitialized = true
    console.log("‚úÖ CommandsApp initialized successfully")
  }

  loadCommandsData() {
    this.commandsData = [
      {
        category: "tracking",
        icon: "üìä",
        title: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è",
        commands: [
          {
            triggers: ["/begin"],
            description: "–ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞.",
            isAdmin: false,
          },
          {
            triggers: ["/sliv"],
            description: "–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ—Ü–∏–¥–∏–≤–∞.",
            isAdmin: false,
          },
          {
            triggers: ["–∫—Ç–æ —è", "—Ö—Ç–æ —è", "–∫—Ç–æ —è?"],
            description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –±–µ–π–¥–∂.",
            isAdmin: false,
          },
          {
            triggers: ["–æ–±–æ –º–Ω–µ"],
            description: "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.",
            isAdmin: false,
          },
          {
            triggers: ["/progress", "–ø—Ä–æ–≥—Ä–µ—Å—Å [—á–∏—Å–ª–æ]"],
            description: "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.",
            isAdmin: false,
          },
          {
            triggers: ["/streak"],
            description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏—é –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–≥–Ω—è.",
            isAdmin: false,
          },
          {
            triggers: ["—Ä–∞–Ω–≥", "—Ç–æ–ø", "/top"],
            description: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.",
            isAdmin: false,
          },
          {
            triggers: ["–°–ª–∏–≤—ã = —á–∏—Å–ª–æ"],
            description: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–∏–¥–∏–≤–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ.",
            isAdmin: false,
          },
          {
            triggers: ["–†–µ–∫–æ—Ä–¥ = —á–∏—Å–ª–æ"],
            description: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.",
            isAdmin: false,
          },
        ],
      },
      {
        category: "admin",
        icon: "üõ°Ô∏è",
        title: "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        commands: [
          {
            triggers: ["–±–∞–Ω @username", "/ban @username"],
            description: "–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.",
            isAdmin: true,
          },
          {
            triggers: ["–º—É—Ç @username", "/mute @username"],
            description: "–ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            isAdmin: true,
          },
          {
            triggers: ["—Ä–∞–∑–±–∞–Ω @username", "/unban @username"],
            description: "–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.",
            isAdmin: true,
          },
          {
            triggers: ["/warn", "–Ω–æ–≤–∞ –≤–∞—Ä–Ω", "–Ω–æ–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å", "–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å"],
            description: "–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            isAdmin: true,
          },
          {
            triggers: ["–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "—á–µ–∫–Ω—É—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "/checkwarn"],
            description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            isAdmin: false,
          },
          {
            triggers: [
              "—Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
              "—Å–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
              "—É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
              "—É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
            ],
            description: "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            isAdmin: true,
          },
          {
            triggers: ["–∑–∞–∫—Ä–µ–ø", "–∑–∞–∫—Ä–µ–ø–∏—Ç—å", "pin"],
            description: "–ó–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ.",
            isAdmin: true,
          },
          {
            triggers: ["–æ—Ç–∫—Ä–µ–ø–∏—Ç—å", "unpin"],
            description: "–û—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ.",
            isAdmin: true,
          },
          {
            triggers: ["–Ω–æ–≤–∞ —É–¥–∞–ª–∏—Ç—å"],
            description: "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç.",
            isAdmin: true,
          },
        ],
      },
      {
        category: "utility",
        icon: "üîß",
        title: "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        commands: [
          {
            triggers: ["–±–æ—Ç", "–Ω–æ–≤–∞"],
            description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç.",
            isAdmin: false,
          },
          {
            triggers: ["–∫–æ–º–∞–Ω–¥—ã", "–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã", "/cm"],
            description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            isAdmin: false,
          },
          {
            triggers: ["–ø—Ä–∞–≤–∏–ª–∞", "/rules", "–Ω–æ–≤–∞ –ø—Ä–∞–≤–∏–ª–∞"],
            description: "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞.",
            isAdmin: false,
          },
          {
            triggers: ["/wiki [–∑–∞–ø—Ä–æ—Å]", "–≤–∏–∫–∏ [–∑–∞–ø—Ä–æ—Å]"],
            description: "–ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏.",
            isAdmin: false,
          },
          {
            triggers: ["/q"],
            description: "–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä-—Ü–∏—Ç–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            isAdmin: false,
          },
          {
            triggers: ["/feedback"],
            description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            isAdmin: false,
          },
        ],
      },
      {
        category: "fun",
        icon: "üéÆ",
        title: "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        commands: [
          {
            triggers: ["–±–æ—Ç –∏–Ω—Ñ–∞ [–≤–æ–ø—Ä–æ—Å]", "–Ω–æ–≤–∞ –∏–Ω—Ñ–∞ [–≤–æ–ø—Ä–æ—Å]"],
            description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
            isAdmin: false,
          },
        ],
      },
      {
        category: "currency",
        icon: "üí∞",
        title: "–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª—é—Ç—ã",
        commands: [
          {
            triggers: [
              "–º–æ–Ω–µ—Ç—ã",
              "–º–æ–Ω–µ—Ç–∫–∏",
              "–º–µ—à–æ–∫",
              "–º–æ–π –º–µ—à–æ–∫",
              "–¥–µ–Ω—å–≥–∏",
              "–±–∞–ª–∞–Ω—Å",
              "–º–æ–π –±–∞–ª–∞–Ω—Å",
              "–º–æ–∏ –º–æ–Ω–µ—Ç—ã",
              "—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è",
              "–∫–∞—Ä–º–∞–Ω",
              "–∫–æ—à–µ–ª–µ–∫",
              "—Å—á—ë—Ç",
              "–º–æ–π —Å—á—ë—Ç",
              "–∫–æ—à–µ–ª—ë–∫",
            ],
            description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å NFC –º–æ–Ω–µ—Ç.",
            isAdmin: false,
          },
          {
            triggers: ["/promo [–∫–æ–¥]"],
            description: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è NFC –º–æ–Ω–µ—Ç.",
            isAdmin: false,
          },
          {
            triggers: ["–ø–µ—Ä–µ–¥–∞—Ç—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]"],
            description: "–ü–µ—Ä–µ–¥–∞—Ç—å NFC –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            isAdmin: false,
          },
          {
            triggers: ["–º–∞–≥–∞–∑–∏–Ω", "shop", "–∫—É–ø–∏—Ç—å —Å—Ç–∏–ª–∏", "–ø–æ–∫—É–ø–∫–∞", "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Ç–∏–ª—å"],
            description: "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∏–ª–µ–π –∑–∞ NFC –º–æ–Ω–µ—Ç—ã.",
            isAdmin: false,
          },
          {
            triggers: ["–º–æ–∏ —Å—Ç–∏–ª–∏", "—Å—Ç–∏–ª–∏", "–∫—É–ø–ª–µ–Ω—ã–µ —Å—Ç–∏–ª–∏", "–∫—É–ø–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏", "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", "–∫–æ—Ä–º–∞–Ω"],
            description: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏.",
            isAdmin: false,
          },
        ],
      },
    ]
  }

  cacheElements() {
    this.elements = {
      navigation: document.getElementById("navigation"),
      navToggle: document.getElementById("navToggle"),
      navMenu: document.getElementById("navMenu"),
      navLinks: document.querySelectorAll(".nav-link"),

      progressBar: document.getElementById("progressBar"),
      scrollToTop: document.getElementById("scrollToTop"),

      search: document.getElementById("search"),
      commandsContainer: document.getElementById("commands-container"),
      noResults: document.getElementById("no-results"),
      categoryFilters: document.querySelectorAll(".category-filter"),

      sections: document.querySelectorAll(".category"),
      animatedElements: document.querySelectorAll('[class*="card"], [class*="item"], [class*="block"]'),

      gradientOrbs: document.querySelectorAll(".gradient-orb"),
      floatingShapes: document.querySelectorAll(".shape"),
    }
  }

  setupEventListeners() {
    const passiveOptions = Utils.supports.passiveEvents ? { passive: true } : false

    window.addEventListener(
      "scroll",
      Utils.throttle(() => {
        this.handleScroll()
      }, CONFIG.scroll.throttleDelay),
      passiveOptions,
    )

    window.addEventListener(
      "resize",
      Utils.debounce(() => {
        this.handleResize()
      }, 250),
      passiveOptions,
    )

    if (this.elements.navToggle) {
      this.elements.navToggle.addEventListener("click", () => {
        this.toggleMobileMenu()
      })
    }

    this.elements.navLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        this.handleNavClick(e, link)
      })
    })

    if (this.elements.scrollToTop) {
      this.elements.scrollToTop.addEventListener("click", () => {
        this.scrollToTop()
      })
    }

    if (this.elements.search) {
      this.elements.search.addEventListener("input", (e) => {
        const activeCategory = document.querySelector(".category-filter.active").dataset.category
        this.filterCommands(e.target.value, activeCategory)
      })
    }

    this.elements.categoryFilters.forEach((button) => {
      button.addEventListener("click", () => {
        this.elements.categoryFilters.forEach((btn) => {
          btn.classList.remove("active")
        })
        button.classList.add("active")

        const category = button.dataset.category
        const searchQuery = this.elements.search.value
        this.filterCommands(searchQuery, category)
      })
    })

    document.addEventListener("keydown", (e) => {
      this.handleKeydown(e)
    })

    document.addEventListener("contextmenu", (e) => {
      e.preventDefault()
      return false
    })

    document.addEventListener(
      "dblclick",
      (e) => {
        e.preventDefault()
      },
      { passive: false },
    )
  }

  initializeComponents() {
    this.setupProgressBar()
    this.setupSmoothScrolling()
    this.setupActiveNavigation()
    this.renderCommands()

    if (!Utils.device.prefersReducedMotion()) {
      this.animateBackground()
    }
  }

  setupAnimations() {
    if (Utils.device.prefersReducedMotion()) {
      console.log("üîá Animations disabled due to user preference")
      return
    }

    if (Utils.supports.intersectionObserver) {
      this.setupIntersectionObserver()
    }

    this.animateOnLoad()
  }

  handleScroll() {
    const scrollY = window.pageYOffset

    this.updateProgressBar(scrollY)
    this.toggleScrollToTopButton(scrollY)
    this.updateActiveNavigation(scrollY)

    if (Utils.device.isDesktop() && !Utils.device.prefersReducedMotion()) {
      this.updateBackgroundParallax(scrollY)
    }
  }

  handleResize() {
    if (!Utils.device.isMobile() && this.elements.navMenu.classList.contains("active")) {
      this.closeMobileMenu()
    }

    this.recalculateNavPositions()
  }

  toggleMobileMenu() {
    const isActive = this.elements.navMenu.classList.contains("active")

    if (isActive) {
      this.closeMobileMenu()
    } else {
      this.openMobileMenu()
    }
  }

  openMobileMenu() {
    this.elements.navMenu.classList.add("active")
    this.elements.navToggle.classList.add("active")
    this.elements.navToggle.setAttribute("aria-expanded", "true")

    if (Utils.device.isMobile()) {
      document.body.style.overflow = "hidden"
    }
  }

  closeMobileMenu() {
    this.elements.navMenu.classList.remove("active")
    this.elements.navToggle.classList.remove("active")
    this.elements.navToggle.setAttribute("aria-expanded", "false")

    document.body.style.overflow = ""
  }

  handleNavClick(e, link) {
    e.preventDefault()

    const targetId = link.getAttribute("href")
    const targetElement = document.querySelector(targetId)

    if (targetElement) {
      const offset = this.elements.navigation.offsetHeight + 20
      Utils.smoothScrollTo(targetElement, offset)

      if (Utils.device.isMobile()) {
        this.closeMobileMenu()
      }

      this.setActiveNavLink(link)
    }
  }

  handleKeydown(e) {
    if (e.key === "Escape" && this.elements.navMenu.classList.contains("active")) {
      this.closeMobileMenu()
    }

    if (e.key === "Home" && e.ctrlKey) {
      e.preventDefault()
      this.scrollToTop()
    }

    if (e.key === "F12") {
      e.preventDefault()
      return false
    }

    if (
      e.ctrlKey &&
      e.shiftKey &&
      (e.key === "I" || e.key === "i" || e.key === "J" || e.key === "j" || e.key === "C" || e.key === "c")
    ) {
      e.preventDefault()
      return false
    }

    if (e.ctrlKey && (e.key === "U" || e.key === "u")) {
      e.preventDefault()
      return false
    }
  }

  setupProgressBar() {
    if (!this.elements.progressBar) return
    this.elements.progressBar.style.width = "0%"
  }

  updateProgressBar(scrollY) {
    if (!this.elements.progressBar) return

    const documentHeight = document.documentElement.scrollHeight - window.innerHeight
    const progress = Math.min((scrollY / documentHeight) * 100, 100)

    this.elements.progressBar.style.width = `${progress}%`
  }

  toggleScrollToTopButton(scrollY) {
    if (!this.elements.scrollToTop) return

    const shouldShow = scrollY > CONFIG.scroll.offsetThreshold

    if (shouldShow && !this.elements.scrollToTop.classList.contains("visible")) {
      this.elements.scrollToTop.classList.add("visible")
    } else if (!shouldShow && this.elements.scrollToTop.classList.contains("visible")) {
      this.elements.scrollToTop.classList.remove("visible")
    }
  }

  scrollToTop() {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    })
  }

  setupSmoothScrolling() {}

  setupActiveNavigation() {
    this.sectionPositions = []
    this.recalculateNavPositions()
  }

  recalculateNavPositions() {
    this.sectionPositions = Array.from(this.elements.sections).map((section) => ({
      id: section.id,
      offsetTop: section.offsetTop,
      offsetBottom: section.offsetTop + section.offsetHeight,
    }))
  }

  updateActiveNavigation(scrollY) {
    const offset = this.elements.navigation.offsetHeight + 50
    const currentPosition = scrollY + offset

    let activeSection = null

    for (const section of this.sectionPositions) {
      if (currentPosition >= section.offsetTop && currentPosition < section.offsetBottom) {
        activeSection = section.id
        break
      }
    }

    if (activeSection) {
      const activeLink = document.querySelector(`.nav-link[href="#${activeSection}"]`)
      if (activeLink) {
        this.setActiveNavLink(activeLink)
      }
    }
  }

  setActiveNavLink(activeLink) {
    this.elements.navLinks.forEach((link) => {
      link.classList.remove("active")
    })

    activeLink.classList.add("active")
  }

  updateBackgroundParallax(scrollY) {
    const parallaxSpeed = 0.5
    const offset = scrollY * parallaxSpeed

    this.elements.gradientOrbs.forEach((orb, index) => {
      const speed = 0.3 + index * 0.1
      orb.style.transform = `translateY(${offset * speed}px)`
    })
  }

  animateBackground() {
    if (Utils.device.isMobile()) return

    this.elements.gradientOrbs.forEach((orb, index) => {
      const delay = index * 2000
      const duration = 20000 + index * 5000

      orb.style.animationDelay = `${delay}ms`
      orb.style.animationDuration = `${duration}ms`
    })

    this.elements.floatingShapes.forEach((shape, index) => {
      const delay = index * 1000
      const duration = 15000 + index * 2000

      shape.style.animationDelay = `${delay}ms`
      shape.style.animationDuration = `${duration}ms`
    })
  }

  setupIntersectionObserver() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    }

    this.observers.main = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("animate-in")
          this.observers.main.unobserve(entry.target)
        }
      })
    }, observerOptions)

    this.elements.animatedElements.forEach((element) => {
      this.observers.main.observe(element)
    })
  }

  animateOnLoad() {
    document.body.classList.add("loaded")

    this.elements.sections.forEach((section, index) => {
      section.style.opacity = "0"
      section.style.transform = "translateY(20px)"
      section.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`
      setTimeout(() => {
        section.style.opacity = "1"
        section.style.transform = "translateY(0)"
      }, index * CONFIG.animations.stagger)
    })
  }

  renderCommands(filteredCommands = null, categoryFilter = "all") {
    const container = this.elements.commandsContainer
    const noResults = this.elements.noResults
    container.innerHTML = ""

    const commandsToRender = filteredCommands || this.commandsData
    let hasResults = false

    for (const category of commandsToRender) {
      if (categoryFilter !== "all" && category.category !== categoryFilter) continue
      if (category.commands.length === 0) continue

      hasResults = true

      const categorySection = document.createElement("section")
      categorySection.className = "category"
      categorySection.id = category.category

      const categoryHeader = document.createElement("div")
      categoryHeader.className = "category-header"

      const categoryIcon = document.createElement("div")
      categoryIcon.className = "category-icon"
      categoryIcon.textContent = category.icon

      const categoryTitle = document.createElement("h2")
      categoryTitle.className = "category-title"
      categoryTitle.textContent = category.title

      categoryHeader.appendChild(categoryIcon)
      categoryHeader.appendChild(categoryTitle)
      categorySection.appendChild(categoryHeader)

      const commandsGrid = document.createElement("div")
      commandsGrid.className = "commands-grid"

      category.commands.forEach((cmd) => {
        const card = document.createElement("div")
        card.className = "command-card"

        const triggers = document.createElement("div")
        triggers.className = "command-triggers"

        cmd.triggers.forEach((trigger) => {
          const triggerSpan = document.createElement("span")
          triggerSpan.className = "command-trigger"
          triggerSpan.textContent = trigger
          triggers.appendChild(triggerSpan)
        })

        const description = document.createElement("p")
        description.className = "command-description"
        description.textContent = cmd.description

        if (cmd.isAdmin) {
          const adminBadge = document.createElement("span")
          adminBadge.className = "admin-badge"
          adminBadge.textContent = "–ê–î–ú–ò–ù"
          description.appendChild(adminBadge)
        }

        card.appendChild(triggers)
        card.appendChild(description)
        commandsGrid.appendChild(card)
      })

      categorySection.appendChild(commandsGrid)
      container.appendChild(categorySection)
    }

    noResults.style.display = hasResults ? "none" : "block"

    // Update cached elements after rendering
    this.elements.sections = document.querySelectorAll(".category")
    this.elements.animatedElements = document.querySelectorAll('[class*="card"], [class*="item"], [class*="block"]')

    // Re-setup animations for new elements
    if (Utils.supports.intersectionObserver && !Utils.device.prefersReducedMotion()) {
      this.setupIntersectionObserver()
    }
  }

  filterCommands(query, categoryFilter = "all") {
    if (!query && categoryFilter === "all") {
      this.renderCommands(null, "all")
      return
    }

    query = query.toLowerCase()

    const filtered = this.commandsData.map((category) => {
      const filteredCommands = category.commands.filter((cmd) => {
        const matchesQuery =
          !query ||
          cmd.triggers.some((t) => t.toLowerCase().includes(query)) ||
          cmd.description.toLowerCase().includes(query)

        const matchesCategory = categoryFilter === "all" || category.category === categoryFilter

        return matchesQuery && matchesCategory
      })

      return {
        ...category,
        commands: filteredCommands,
      }
    })

    this.renderCommands(filtered, categoryFilter)
  }

  destroy() {
    window.removeEventListener("scroll", this.handleScroll)
    window.removeEventListener("resize", this.handleResize)

    Object.values(this.observers).forEach((observer) => {
      if (observer && observer.disconnect) {
        observer.disconnect()
      }
    })

    this.isInitialized = false
    console.log("üßπ CommandsApp destroyed")
  }
}

document.addEventListener("DOMContentLoaded", () => {
  if (!window.requestAnimationFrame) {
    console.warn("‚ö†Ô∏è RequestAnimationFrame not supported")
    return
  }

  window.commandsApp = new CommandsApp()

  if (Utils.supports.requestIdleCallback) {
    requestIdleCallback(() => {
      console.log("üöÄ Background tasks completed")
    })
  }

  if ("serviceWorker" in navigator) {
    window.addEventListener("load", () => {})
  }
})

window.addEventListener("error", (e) => {
  console.error("‚ùå JavaScript Error:", e.error)
})

if (typeof module !== "undefined" && module.exports) {
  module.exports = { CommandsApp, Utils, CONFIG }
}
